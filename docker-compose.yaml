services:
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   depends_on:
  #     - loki
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   networks:
  #     - auction_network

  # loki:
  #   image: grafana/loki:latest
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./loki-config.yml:/etc/loki/loki-config.yml
  #     - loki-data:/loki
  #   command: -config.file=/etc/loki/loki-config.yml
  #   networks:
  #     - auction_network

  # promtail:
  #   image: grafana/promtail:latest
  #   volumes:
  #     - ./auction-service/logs:/logs/auction-service
  #     - ./identify-service/logs:/logs/identify-service
  #     - ./promtail-config.yml:/etc/promtail/config.yaml
  #   command: -config.file=/etc/promtail/config.yaml
  #   networks:
  #     - auction_network

  auction-service:
    container_name: auction-service
    build:
      context: ./auction-service
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
      args:
        - SERVICE_NAME=auction-service
    environment:
      - NODE_ENV=production
      - PORT=7001
      - POSTGRES_USER=postgres
      - POSTGRES_HOST=auction-db
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auction-db
      # - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      auction-db:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_healthy
    ports:
      - "7001:7001"
    networks:
      - auction_network
    volumes:
      - ./auction-service:/app
      - /app/node_modules
      - /app/node_modules/.prisma

  auction-db:
    image: postgres
    container_name: auction-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auction-db
    volumes:
      - auction-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - auction_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # identify-service:
  #   container_name: identify-service
  #   build:
  #     context: ./identify-service
  #     dockerfile: Dockerfile
  #     target: ${NODE_ENV:-production}
  #     args:
  #       - SERVICE_NAME=identify-service
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=7002
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_HOST=identify-db
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=identify_db
  #     - JWT_SECRET=your-secret-key
  #   ports:
  #     - "7002:7002"
  #   networks:
  #     - auction_network
  #   depends_on:
  #     identify-db:
  #       condition: service_healthy
  #   volumes:
  #     - ./identify-service:/app
  #     - /app/node_modules

  # identify-db:
  #   image: postgres
  #   container_name: identify-db
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=identify_db
  #   volumes:
  #     - identify-db-data:/var/lib/postgresql/data
  #   ports:
  #     - "5433:5432"
  #   networks:
  #     - auction_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=guest
  #     - RABBITMQ_DEFAULT_PASS=guest
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   networks:
  #     - auction_network
  #   healthcheck:
  #     test: ["CMD", "rabbitmqctl", "status"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

networks:
  auction_network:
    driver: bridge

volumes:
  auction-db-data:
  # identify-db-data:
  # grafana-storage:
  # loki-data:
